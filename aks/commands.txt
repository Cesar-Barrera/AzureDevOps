Start Docker Images
run  = docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d   ---->  Generate images and container / Test solution
stop = docker-compose -f docker-compose.yml -f docker-compose.override.yml down    ----> Delete container keeping images
--
See images
docker images

See running containers
docker ps
--
See application locally
TEST
http://localhost:8000/swagger/index.html
http://localhost:8001/
--
Stop Running Containers
stop = docker-compose -f docker-compose.yml -f docker-compose.override.yml down
-- --
Install the Azure CLI
	https://docs.microsoft.com/en-us/cli/azure/install-azure-cli
	https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli
--
az version

{
  "azure-cli": "2.16.0",
  "azure-cli-core": "2.16.0",
  "azure-cli-telemetry": "1.0.6",
  "extensions": {}
}
--
az login
--
Create a resource group
az group create --name myResourceGroup --location westeurope
--
Create an Azure Container Registry
az acr create --resource-group myResourceGroup --name shoppingmyacr --sku Basic
--
Enable Admin Account for ACR Pull
az acr update -n shoppingmyacr --admin-enabled true
--
Log in to the container registry
az acr login --name shoppingmyacr
Login Succeeded
--
Tag a container image

get the login server address
az acr list --resource-group myResourceGroup --query "[].{acrLoginServer:loginServer}" --output table
shoppingmyacr.azurecr.io
--
Tag your images

docker tag shoppingapi:latest shoppingmyacr.azurecr.io/shoppingapi:v1
docker tag shoppingclient:latest shoppingmyacr.azurecr.io/shoppingclient:v1

Check
docker images
--
Push images to registry

docker push shoppingmyacr.azurecr.io/shoppingapi:v1
docker push shoppingmyacr.azurecr.io/shoppingclient:v1
--
List images in registry
az acr repository list --name shoppingmyacr --output table

Result
shoppingapi
shoppingclient
--
See tags
az acr repository show-tags --name shoppingmyacr --repository shoppingclient --output table

Result
v1
--
Create AKS cluster with attaching ACR
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --generate-ssh-keys --attach-acr shoppingmyacr


???az aks update -n myAKSCluster -g myResourceGroup --attach-acr shoppingmyacr    ************
--
Install the Kubernetes CLI
az aks install-cli
--
Connect to cluster using kubectl
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

To verify;
kubectl get nodes
kubectl get all
--
shoppingmyacr
shoppingmyacr
Create secret with acr credentials

az acr list --resource-group myResourceGroup --query "[].{acrLoginServer:loginServer}" --output table

kubectl create secret docker-registry acr-secret --docker-server=shoppingmyacr.azure.io --docker-username=shoppingmyacr --docker-password=p+cON2xqw96lHv9WBsk0L/uupsnD6ve0xT1eg34+p3+ACRCrz4DB --docker-email=cesar.barrera.escudero@gmail.com
kubectl get secret
--
Check Kube Config

kubectl config get-contexts
kubectl config current-context
kubectl get all
kubectl config use-context gcpcluster-k8s-1
	Switched to context "gcpcluster-k8s-1"
--
Deploy microservices to AKS

kubectl apply -f .\aks\
kubectl get svc
--
Clean All AKS and Azure Resources

az group delete --name myResourceGroup --yes --no-wait

--- 
replicas

kubectl scale --replicas=3 deployment.apps/shoppingapi-deployment 
kubectl get pod --watch
az aks show --resource-group myResourceGroup --name myAKSCluster --query kubernatesVersion --output table
* apply  shoppingautoscale.yaml
kubectl get hpa


------

Trobleshotting

kubectl get pods
kubectl describe pod shoppingapi-deployment-d78cdcd5-b95zp 
kubectl delete pod shoppingclient-deployment-6c84bc9bf9-l7b48 

kubectl get all

kubectl get deployments --all-namespaces
kubectl delete -n NAMESPACE deployment DEPLOYMENT

kubectl delete -n default deployment shoppingclient-deployment
kubectl delete -n default deployment shoppingapi-deployment
kubectl delete -n default deployment mongo-deployment 

az acr repository list shoppingmyacr

kubectl describe pod shoppingclient-deployment-5d8d87b9fc-sxhts
mongo-configmap.yaml
kubectl apply -f .\aks\mongo-secret.yaml
kubectl apply -f .\aks\mongo.yaml
kubectl apply -f .\aks\shoppingapi.yaml

MONGO_INITIDB_ROOT_PASSWORD
MONGO_INITDB_ROOT_PASSWORD

MONGO_INITDB_ROOT_USERNAME
MONGO_INITDB_ROOT_PASSWORD

MONGO_INITDB_ROOT_PASSWORD

az acr repository delete -n shoppingmyacr --image shoppingapi:v1
az acr repository delete -n shoppingmyacr --image shoppingclient:v1


--------
Update 

docker images
docker rmi 77
**Do changes**
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d   ---->  Generate images and container / Test solution
docker-compose -f docker-compose.yml -f docker-compose.override.yml down    ----> Delete container keeping images




docker tag shoppingclient:latest shoppingmyacr.azurecr.io/shoppingclient:v1
docker push shoppingmyacr.azurecr.io/shoppingclient:v2

az acr repository list --name shoppingmyacr --output table
az acr repository show-tags --name shoppingmyacr --repository shoppingclient --output table

kubectl apply -f .\aks\

kubectl get pod --watch
kubectl get deployment -o wide
kubectl get replicaset -o wide

az aks update -g MyResourceGroup -n myAKSCluster \  --enable-image-cleaner 
az aks update -g MyResourceGroup -n myAKSCluster --enable-image-cleaner

docker tag shoppingmyacr.azurecr.io/shoppingclient:v1 shoppingmyacr.azurecr.io/shoppingclient:v2
docker push shoppingmyacr.azurecr.io/shoppingclient:v2

az acr repository delete --name shoppingmyacr --image shoppingclient:v1